{
	"metadata": {
		"version": 2
	},
	"application": {
		"name": "ex-go",
		"language": "GOLANG",
		"artifact_store": {
			"type": "s3",
			"repositories": [
				{
					"category": "rc-packaging",
					"bucket": "calculi-guide-rails-rc"
				},
				{
					"category": "rc-packaging",
					"bucket": "calculi-guide-rails-rc"
				},
				{
					"category": "final-packaging",
					"bucket": "calculi-guide-rails"
				},
				{
					"category": "logs",
					"bucket": "guide-rails-application-logs"
				}
			]
		}
	},
	"pipeline": {
		"segments": [
			{
				"name": "Build",
				"segment_type": "build",
				"publish_attributes": {
					"publish": true,
					"docker_images": [
						{
							"repository": "exp-go-k8s",
							"tags": [
								"((application.version))",
								"latest"
							]
						}
					]
				},
				"exit_actions": {},
				"properties": [
					{
						"name": "gopath",
						"value": "${SEGMENT_BASE_DIR}/cache/go",
						"description": "GOPATH is set to ${SEGMENT_BASE_DIR}/cache/go by default, when caching is enabled. Caches are maintained on the worker where your build gets allocated. For a new worker assigned to the build, the cache will be re-created",
						"when": "0001-01-01T00:00:00Z"
					}
				],
				"deployment_strategy": {},
				"application_init": {},
				"packages": [
					{
						"name": "rabbitmq",
						"downloads": [],
						"type": 2,
						"helm_package": {
							"pkg_source": 3,
							"chart_name": "rabbitmq",
							"repository_url": "https://charts.bitnami.com/bitnami"
						}
					},
					{
						"name": "mysql",
						"downloads": [],
						"type": 2,
						"helm_package": {
							"pkg_source": 3,
							"chart_name": "mysql",
							"chart_version": "8.8.32",
							"repository_url": "https://charts.bitnami.com/bitnami"
						}
					},
					{
						"name": "custom",
						"downloads": [],
						"type": 2,
						"helm_package": {
							"pkg_source": 1,
							"charts_folder": "chart",
							"chart_name": "exp-go-k8s-test3"
						}
					},
					{
						"name": "file-package",
						"downloads": [],
						"files": [
							"chart"
						],
						"package_install_command": "echo \"hello!\"",
						"type": 1
					},
					{
						"name": "vault-test",
						"downloads": [
							{
								"link": "https://releases.hashicorp.com/vault/1.9.3/vault_1.9.3_linux_amd64.zip",
								"name": "vault.zip"
							}
						],
						"package_install_command": "unzip vault-bin/vault.zip -d ",
						"type": 1
					}
				],
				"instance_tags": [
					{
						"name": "application.name",
						"value": "((application.name))",
						"when": "0001-01-01T00:00:00Z"
					}
				],
				"post_deployment_actions": {
					"loadbalancer": {}
				},
				"cache_info": {
					"paths": [
						"((gopath))"
					]
				},
				"tasks": [
					{
						"name": "go-k8s",
						"steps": [
							{
								"name": "Get Dependencies",
								"definition": "Get Dependencies",
								"command": "go get -t -d ./...\n\ngo install github.com/onsi/ginkgo/v2/ginkgo@v2.1.3\n\n",
								"properties": null
							},
							{
								"name": "Unit Tests",
								"definition": "Unit Tests",
								"command": "set -o pipefail\n${GOPATH}/bin/ginkgo -cover -r  --skip-package=pb,test,mock,proto,testdata,gr-cli,util | tee ginkgo.output",
								"properties": null
							},
							{
								"name": "Convert coverage",
								"definition": "Convert coverage",
								"command": "cat ginkgo.output 2\u003e\u00261 | go-junit-report \u003e test.xml\ngocov convert coverprofile.out | gocov-xml \u003e coverage.xml",
								"properties": null
							},
							{
								"name": "Build",
								"definition": "Build",
								"command": "cd app-code\ngo build -o http-sample \n\n\n\n",
								"properties": null
							}
						],
						"docker_options": {}
					}
				]
			},
			{
				"name": "Integration",
				"segment_type": "integration",
				"run_after": [
					"Build"
				],
				"exit_actions": {},
				"properties": [
					{
						"name": "k8s.app.name",
						"value": "((application.name))-((application.branch))-((application.shortsha))",
						"description": "test",
						"type": "string"
					}
				],
				"deployment_strategy": {
					"canaries": 1,
					"max_in_flight": 1,
					"canary_watch_time": "5000-30000",
					"update_watch_time": "5000-30000",
					"serial": false
				},
				"application_init": {},
				"instance_tags": [
					{
						"name": "application.name",
						"value": "((application.name))",
						"when": "0001-01-01T00:00:00Z"
					}
				],
				"post_deployment_actions": {
					"loadbalancer": {}
				},
				"source_code_available": true,
				"tasks": [
					{
						"name": "exp-go-k8s",
						"steps": [
							{
								"name": "Env",
								"definition": "Env",
								"command": "env\n \nfunction dnsCheck() { \n    appURL=$1 \n    statusCode=$(curl -s -L -o /dev/null -w \"%{http_code}\" ${appURL} || true)\n\n    count=40\n    while [ $count -ge 0 ]; do \n        if [ $statusCode -ne 200 ]; then \n            echo \"Waiting for DNS record to be available...\"\n            sleep 11\n            count=$(expr $count - 1)\n            statusCode=$(curl -L -s -o /dev/null -w \"%{http_code}\" ${appURL} || true)\n            echo \"Received status code: ${statusCode} from ${appURL}\"\n        else \n             break\n         fi\n    done\n\n    if [ $statusCode -ne 200 ]; then\n         echo \"Failed to connect to application on DNS...\"\n         exit 1\n    fi\n}\n\necho \"Testing the east DNS\"\ndnsCheck \"http://((application.name))-((segment.name))-((application.branch)).guide-rails.io\"\n\necho \"Testing the west DNS\"\ndnsCheck \"http://((application.name))-((segment.name))-((application.branch))-west.guide-rails.io\"",
								"properties": null
							}
						],
						"docker_options": {}
					}
				],
				"k8s_instance_groups": [
					{
						"tool_config_alias_id": "5e7bdf98-dc21-4969-4bfa-0c719dd7844d",
						"docker_registry_alias_id": "0c4a1a24-d650-4f1b-5a34-e4307deae00d",
						"name": "((application.name))-1",
						"cluster_name": "",
						"namespace": "((application.name))-((application.branch))",
						"replicas": 1,
						"containers": [
							{
								"name": "((application.name))",
								"image": "guide-rails/exp-go-k8s:((application.version))",
								"ports": [
									{
										"name": "endpoint2",
										"hostPort": 3000,
										"containerPort": 3000,
										"protocol": "TCP"
									}
								],
								"resources": {},
								"imagePullPolicy": "Always",
								"securityContext": {
									"privileged": true
								}
							}
						],
						"autoscaling": {
							"metadata": {
								"creationTimestamp": null
							},
							"spec": {
								"scaleTargetRef": {
									"kind": "",
									"name": ""
								},
								"minReplicas": 2,
								"maxReplicas": 2,
								"metrics": [
									{
										"type": "Resource",
										"resource": {
											"name": "cpu",
											"target": {
												"type": "AverageValue",
												"averageValue": "70"
											}
										}
									},
									{
										"type": "Resource",
										"resource": {
											"name": "memory",
											"target": {
												"type": "AverageValue",
												"averageValue": "40"
											}
										}
									}
								]
							},
							"status": {
								"currentReplicas": 0,
								"desiredReplicas": 0,
								"currentMetrics": null,
								"conditions": null
							}
						},
						"ingress_enabled": true,
						"ingress": {
							"metadata": {
								"creationTimestamp": null
							},
							"spec": {
								"rules": [
									{
										"host": "((application.name))-((segment.name))-((application.branch)).guide-rails.io",
										"http": {
											"paths": [
												{
													"path": "/",
													"backend": {
														"servicePort": "80"
													}
												}
											]
										}
									}
								]
							},
							"status": {
								"loadBalancer": {}
							}
						},
						"load_balancing_type": 2,
						"dns_hosted_zone": "guide-rails.io",
						"dns_zone_type": "public",
						"service_name": "((application.name))-((application.shortsha))",
						"alb_ingress_controller_annotations": {
							"alb.ingress.kubernetes.io/certificate-arn": "arn:aws:iam::818130157321:server-certificate/guide-rails-wildcard-20220726",
							"alb.ingress.kubernetes.io/healthcheck-path": "/",
							"alb.ingress.kubernetes.io/healthcheck-port": "traffic-port",
							"alb.ingress.kubernetes.io/listen-ports": "[{\"HTTP\": 80}, {\"HTTPS\":443}]",
							"alb.ingress.kubernetes.io/scheme": "internal",
							"alb.ingress.kubernetes.io/ssl-redirect": "443",
							"alb.ingress.kubernetes.io/subnets": "subnet-03befc0736d0d5736,subnet-00346bcb1922a43fb"
						},
						"volumes": [
							{
								"size": "1Gi",
								"mount_path": "/tmp",
								"attributes": {
									"ReadWriteOnce": "true"
								}
							}
						],
						"deploy_application": true,
						"helm_packages": [
							{
								"name": "rabbitmq",
								"type": 2,
								"helmPackages": [
									{
										"pkg_source": 3,
										"chart_name": "rabbitmq",
										"repository_url": "https://charts.bitnami.com/bitnami"
									}
								]
							}
						]
					},
					{
						"tool_config_alias_id": "2c99a7d3-76d8-40be-4d71-f7811bc9a338",
						"docker_registry_alias_id": "0c4a1a24-d650-4f1b-5a34-e4307deae00d",
						"name": "((application.name))-west",
						"cluster_name": "",
						"namespace": "((application.name))-((application.branch))",
						"replicas": 1,
						"containers": [
							{
								"name": "((application.name))",
								"image": "guide-rails/exp-go-k8s:((application.version))",
								"ports": [
									{
										"name": "endpoint1",
										"hostPort": 3000,
										"containerPort": 3000,
										"protocol": "TCP"
									}
								],
								"resources": {},
								"imagePullPolicy": "Always",
								"securityContext": {
									"privileged": true
								}
							}
						],
						"autoscaling": {
							"metadata": {
								"creationTimestamp": null
							},
							"spec": {
								"scaleTargetRef": {
									"kind": "",
									"name": ""
								},
								"minReplicas": 3,
								"maxReplicas": 4,
								"metrics": [
									{
										"type": "Resource",
										"resource": {
											"name": "cpu",
											"target": {
												"type": "AverageValue",
												"averageValue": "70"
											}
										}
									},
									{
										"type": "Resource",
										"resource": {
											"name": "memory",
											"target": {
												"type": "AverageValue",
												"averageValue": "40"
											}
										}
									}
								]
							},
							"status": {
								"currentReplicas": 0,
								"desiredReplicas": 0,
								"currentMetrics": null,
								"conditions": null
							}
						},
						"ingress_enabled": true,
						"ingress": {
							"metadata": {
								"creationTimestamp": null
							},
							"spec": {
								"rules": [
									{
										"host": "((application.name))-((segment.name))-((application.branch))-west.guide-rails.io",
										"http": {
											"paths": [
												{
													"path": "/",
													"backend": {
														"servicePort": "80"
													}
												}
											]
										}
									}
								]
							},
							"status": {
								"loadBalancer": {}
							}
						},
						"load_balancing_type": 2,
						"dns_hosted_zone": "guide-rails.io",
						"service_name": "((application.name))-((application.shortsha))",
						"alb_ingress_controller_annotations": {
							"alb.ingress.kubernetes.io/certificate-arn": "arn:aws:iam::818130157321:server-certificate/guide-rails-wildcard-20220726",
							"alb.ingress.kubernetes.io/healthcheck-path": "/",
							"alb.ingress.kubernetes.io/healthcheck-port": "traffic-port",
							"alb.ingress.kubernetes.io/listen-ports": "[{\"HTTP\": 80}, {\"HTTPS\":443}]",
							"alb.ingress.kubernetes.io/scheme": "internal",
							"alb.ingress.kubernetes.io/ssl-redirect": "443",
							"alb.ingress.kubernetes.io/subnets": "subnet-05add8dba3c11e25c, subnet-0e374f1f6a79a5009"
						},
						"volumes": [
							{
								"persistent": true,
								"size": "1Gi",
								"mount_path": "/data/play",
								"attributes": {
									"ReadWriteMany": "true"
								}
							}
						],
						"deploy_application": true,
						"properties": [
							{
								"name": "gr.k8s.efs.fsid",
								"value": "fs-043dcd345ead79d9d"
							}
						]
					}
				],
				"deployment_target": 2
			},
			{
				"name": "Isolation",
				"segment_type": "isolation",
				"run_after": [
					"Build"
				],
				"exit_actions": {},
				"properties": [
					{
						"name": "POSTGRES_PASSWORD",
						"value": "password",
						"type": "string"
					},
					{
						"name": "PGDATA",
						"value": "/data/pgdata",
						"type": "string"
					},
					{
						"name": "gr.helm.wait.timeout",
						"value": "2m",
						"type": "string"
					}
				],
				"deployment_strategy": {
					"canaries": 1,
					"max_in_flight": 1,
					"canary_watch_time": "5000-30000",
					"update_watch_time": "5000-30000",
					"serial": false
				},
				"application_init": {},
				"instance_tags": [
					{
						"name": "application.name",
						"value": "((application.name))"
					}
				],
				"tasks": [
					{
						"name": "HC",
						"steps": [
							{
								"name": "Verify connection",
								"definition": "Verify connection",
								"command": "env\n\nfunction connectionCheck() {\n    host=$1\n    port=$2\n    statusCode=$(nc -zv ${host} ${port} || true)\n\n    count=40\n    while [ $count -ge 0 ]; do \n        if [ $statusCode -ne 0 ]; then \n            echo \"Waiting for connectivity to be available...\"\n            sleep 10\n            count=$(expr $count - 1)\n            statusCode=$(nc -zv ${host} ${port} || true)\n            echo \"No connection yet to host ${host} on port ${port}\"\n        else \n             break\n         fi\n    done\n\n    if [ $statusCode -ne 0 ]; then\n         echo \"Failed to connect to application on port...\"\n         exit 1\n    fi\n}\n\n",
								"properties": null
							}
						],
						"docker_options": {}
					}
				],
				"k8s_instance_groups": [
					{
						"tool_config_alias_id": "2c99a7d3-76d8-40be-4d71-f7811bc9a338",
						"docker_registry_alias_id": "0c4a1a24-d650-4f1b-5a34-e4307deae00d",
						"name": "((application.name))",
						"cluster_name": "",
						"namespace": "((application.name))-((application.branch))",
						"replicas": 1,
						"containers": [
							{
								"name": "((application.name))",
								"image": "dockerhub-proxy/library/postgres:latest",
								"ports": [
									{
										"name": "db",
										"hostPort": 5432,
										"containerPort": 5432,
										"protocol": "TCP"
									}
								],
								"resources": {},
								"imagePullPolicy": "IfNotPresent",
								"securityContext": {
									"privileged": false
								}
							}
						],
						"autoscaling": {
							"metadata": {
								"creationTimestamp": null
							},
							"spec": {
								"scaleTargetRef": {
									"kind": "",
									"name": ""
								},
								"maxReplicas": 0
							},
							"status": {
								"currentReplicas": 0,
								"desiredReplicas": 0,
								"currentMetrics": null,
								"conditions": null
							}
						},
						"ingress_enabled": true,
						"ingress": {
							"metadata": {
								"creationTimestamp": null
							},
							"spec": {
								"rules": [
									{
										"host": "((application.name))-((segment.name))-((application.branch)).guide-rails.io"
									}
								]
							},
							"status": {
								"loadBalancer": {}
							}
						},
						"load_balancing_type": 1,
						"dns_zone_type": "public",
						"service_name": "((application.name))-((application.shortsha))",
						"alb_ingress_controller_annotations": {
							"service.beta.kubernetes.io/aws-load-balancer-nlb-target-type": "ip",
							"service.beta.kubernetes.io/aws-load-balancer-subnets": "subnet-0e374f1f6a79a5009,subnet-05add8dba3c11e25c"
						},
						"volumes": [
							{
								"persistent": true,
								"size": "1Gi",
								"mount_path": "/data",
								"attributes": {
									"ReadWriteOnce": "true"
								}
							}
						],
						"type": "StatefulSet",
						"stateful_set_spec": {
							"replicas": 2,
							"pod_management_policy": 1,
							"update_strategy": 1,
							"headless_service": true
						},
						"deploy_application": true,
						"helm_packages": [
							{
								"name": "custom",
								"type": 2,
								"helmPackages": [
									{
										"pkg_source": 1,
										"charts_folder": "chart",
										"chart_name": "exp-go-k8s-test3"
									}
								]
							},
							{
								"name": "mysql",
								"type": 2,
								"helmPackages": [
									{
										"pkg_source": 3,
										"chart_name": "mysql",
										"chart_version": "8.8.32",
										"repository_url": "https://charts.bitnami.com/bitnami"
									}
								]
							}
						]
					}
				],
				"deployment_target": 2
			},
			{
				"name": "Cron",
				"segment_type": "isolation",
				"run_after": [
					"Build"
				],
				"exit_actions": {},
				"deployment_strategy": {
					"canaries": 1,
					"max_in_flight": 1,
					"canary_watch_time": "5000-30000",
					"update_watch_time": "5000-30000",
					"serial": false
				},
				"application_init": {},
				"instance_tags": [
					{
						"name": "application.name",
						"value": "((application.name))"
					}
				],
				"k8s_instance_groups": [
					{
						"tool_config_alias_id": "5e7bdf98-dc21-4969-4bfa-0c719dd7844d",
						"docker_registry_alias_id": "0c4a1a24-d650-4f1b-5a34-e4307deae00d",
						"name": "((application.name))",
						"cluster_name": "",
						"namespace": "((application.name))-((application.branch))",
						"replicas": 1,
						"containers": [
							{
								"name": "((application.name))",
								"image": "dockerhub-proxy/library/busybox:latest",
								"command": [
									"/bin/sh",
									"-ec",
									"date; echo \"Hello, World!\""
								],
								"resources": {},
								"imagePullPolicy": "IfNotPresent",
								"securityContext": {
									"privileged": false
								}
							}
						],
						"service_name": "((application.name))-((application.shortsha))",
						"type": "CronJob",
						"deploy_application": true,
						"cron_jobs_spec": {
							"cron_jobs_schedule": {
								"minutes": "*/10",
								"hours": "*",
								"day_of_the_month": "*",
								"month": "*",
								"day_of_the_week": "*"
							},
							"concurrency_policy": 1
						}
					}
				],
				"deployment_target": 2
			},
			{
				"name": "Production",
				"segment_type": "production",
				"persistent": true,
				"run_after": [
					"Integration",
					"Isolation"
				],
				"exit_actions": {},
				"deployment_strategy": {
					"canaries": 1,
					"max_in_flight": 1,
					"canary_watch_time": "5000-30000",
					"update_watch_time": "5000-30000",
					"serial": false
				},
				"application_init": {},
				"instance_tags": [
					{
						"name": "application.name",
						"value": "((application.name))",
						"when": "0001-01-01T00:00:00Z"
					}
				],
				"gated": true,
				"post_deployment_actions": {
					"loadbalancer": {}
				},
				"k8s_instance_groups": [
					{
						"tool_config_alias_id": "2c99a7d3-76d8-40be-4d71-f7811bc9a338",
						"docker_registry_alias_id": "0c4a1a24-d650-4f1b-5a34-e4307deae00d",
						"name": "((application.name))",
						"cluster_name": "",
						"namespace": "((application.name))",
						"replicas": 1,
						"containers": [
							{
								"name": "((application.name))",
								"image": "guide-rails/exp-go-k8s:((application.version))",
								"ports": [
									{
										"name": "endpoint-1",
										"hostPort": 3000,
										"containerPort": 3000,
										"protocol": "TCP"
									}
								],
								"resources": {},
								"imagePullPolicy": "Always"
							}
						],
						"autoscaling": {
							"metadata": {
								"creationTimestamp": null
							},
							"spec": {
								"scaleTargetRef": {
									"kind": "",
									"name": ""
								},
								"minReplicas": 1,
								"maxReplicas": 2,
								"metrics": [
									{
										"type": "Resource",
										"resource": {
											"name": "cpu",
											"target": {
												"type": "Utilization",
												"averageUtilization": 80
											}
										}
									}
								]
							},
							"status": {
								"currentReplicas": 0,
								"desiredReplicas": 0,
								"currentMetrics": null,
								"conditions": null
							}
						},
						"ingress_enabled": true,
						"ingress": {
							"metadata": {
								"creationTimestamp": null
							},
							"spec": {
								"rules": [
									{
										"host": "((application.name)).guide-rails.io",
										"http": {
											"paths": [
												{
													"path": "/",
													"backend": {
														"servicePort": 80
													}
												}
											]
										}
									}
								]
							},
							"status": {
								"loadBalancer": {}
							}
						},
						"load_balancing_type": 2,
						"dns_hosted_zone": "guide-rails.io",
						"service_name": "((application.name))-((application.shortsha))",
						"alb_ingress_controller_annotations": {
							"alb.ingress.kubernetes.io/certificate-arn": "arn:aws:iam::818130157321:server-certificate/guide-rails-wildcard-20220726",
							"alb.ingress.kubernetes.io/healthcheck-path": "/",
							"alb.ingress.kubernetes.io/healthcheck-port": "traffic-port",
							"alb.ingress.kubernetes.io/listen-ports": "[{\"HTTP\": 80}, {\"HTTPS\":443}]",
							"alb.ingress.kubernetes.io/scheme": "public",
							"alb.ingress.kubernetes.io/ssl-redirect": "443",
							"alb.ingress.kubernetes.io/subnets": "subnet-07b5638c601772ae6, subnet-0e2334d4d4099bfcd"
						},
						"deploy_application": true
					}
				],
				"deployment_target": 2
			}
		],
		"exit_actions": {
			"default": {
				"code_analysis": {
					"publish": true,
					"properties": null
				}
			}
		},
		"default_properties": [
			{
				"name": "gr.helm.wait.timeout",
				"value": "10m",
				"type": "string"
			}
		],
		"deployment_files": [],
		"application_init": {
			"command": "bin/start-service.sh"
		}
	},
	"organization": {
		"orgname": "Experimental"
	}
}